name: Upload Python Package

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
        - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Specify the Python version

      # Step 3: Install dependencies for building and uploading the package
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install build twine  # Install build and twine

      # Step 4: Build the package
      - name: Build the package
        run: python -m build  # Build source and wheel distributions

      # Step 5: List files in the dist directory for debugging
      - name: List files for debugging
        run: ls -l dist  # List the contents of the dist directory

      # Step 6: Extract version from the tag and upload the matching files
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__  # Use __token__ for authentication
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}  # Use the PyPI API token stored as a secret
        run: |
          # Extract the version from the tag
          TAG_NAME=$(echo "${GITHUB_REF#refs/tags/}")  # Get the tag name without "refs/tags/"
          VERSION="${TAG_NAME#v}"  # Remove the 'v' prefix

          echo "Version extracted from tag: $VERSION"

          # Define the base name of your package
          PACKAGE_NAME="numan_plus"

          # Find the distribution files that match the extracted version
          LATEST_FILES=$(ls dist | grep -E "^${PACKAGE_NAME}-${VERSION}.*\.(tar\.gz|whl)$")

          # Check if files were found
          if [ -z "$LATEST_FILES" ]; then
            echo "No distribution files found for version $VERSION"
            exit 1
          fi

          # Upload the matching files
          for FILE in $LATEST_FILES; do
            echo "Uploading $FILE"
            twine upload "dist/$FILE"
          done
